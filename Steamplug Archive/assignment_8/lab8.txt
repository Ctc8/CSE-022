1. There is a real positive number K and real number n0
f(n) must be less than or equal to K * n^2 for all n values greater than 0

2. 2n^2 + 5n + 7 = O(n^2)

Kn^2 >= 2n^2 + 5n + 7 for all n > n0

Let K = 14 because adding coefficients of "2", "5", and "7"
Let n0 = 1

14n^2 >= 2n^2 + 5n + 7 for all n > 1

Inequality is true thus satisfying conditions for O(n^2)
Therefore, 2n^2 + 5n + 7 = O(n^2)

3. 5n + 3 = O(n)

Kn >= 5n + 3 for all n > n0

Let K = 8 because adding coefficients of "5" and "3"
Let n0 = 1

8n >= 5n + 3 for all n > 1

Inequality is true thus satisfying conditions for O(n^2)
Therefore, 5n + 3 = O(n^2)

4. 5n + 3 = O(n^2)

Kn^2 >= 5n + 3 for all n > n0

Let K = 8 because adding coefficients of "5" and "3"
Let n0 = 1

8n^2 >= 5n + 3 for all n > 1

Inequality is true thus satisfying conditions for O(n^2)
Therefore, 5n + 3 = O(n^2)

5. The linear search process works by starting from the furthest left element of an array and comparing x one by one with each element in the array. If x matches with an element, then return its location. 

for i = 0 to len(array)-1:              # iterate through the array
    if array[i] == x:                   # check if the location of each element is equal to the location of x
        return i                        # return the location of x

6. Order of complexity: O(n)
K * n >= n for all n > n0

7. Selection sorting works by iterating through an array, selecting the lowest value from the unsorted partition, and moving it to the end of the sorted list. This process repeats until the unsorted partition is empty. 

8. Order of complexity: O(n^2)
K * n^2 >= (n+1) * n / 2 for all n > n0

9. The process of insertion sorting goes by working from left to right, examining each element and comparing it to the elements on the left of it, and finally inserting the element in the correct position in the list. Insertion sorting a particular array could possibly already be sorted, and this is known as O(n) to be the best case scenario. In contrast, the worst case scenario is O(n^2) which means that the array is in the reverse order of when it is sorted. 

[6,5,4,3,2,1]
(1) comparison: "5" 6 | 4 3 2 1
(2) comparisons: "4" 5 6 | 3 2 1
(3) comparisons: "3" 4 5 6 | 2 1
(4) comparisons: "2" 3 4 5 6 | 1
(5) comparisons: "1" 2 3 4 5 6

10. Binary search works by going to the middle element and checking for the target you are looking for. If it is not the desired target, it checks by searching to the left if the target is smaller or to the right if the target is larger (changes range of interest as well). This repeats until the target is found or when you run out of elements. Binary search only works for sorted lists. Its order of complexity is f(n) = 1 + f(n/2)

go to middle element
- see if you are done
- if not then either go left (if target is smaller) or right (if target is larger)